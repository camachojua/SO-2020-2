* Primer clase
** Teoría
*** ¿Dónde podemos encontrar una computadora?
Los componentes de procesamiento digital se pueden encontrar en todos
lados: relojes, sensores, actuadores, interfaces físicas de usuario,
luces, etc. Debido al bajo coste de fabricación de los chips es más
barato insertar una pequeña computadora que construir un dispositivo
mecánico que realice un acción (el costo es tan bajo que cuesta más
empaquetar un chip que crearlo).

Como hay muchas computadoras procesando información dentro de las
entidades físicas que construimos es necesario administrar ese
procesamiento y la información que se obtiene a partir de dichas
entidades de cómputo (es decir: tenemos muchos recursos de cómputo,
mucha información que administrar y demasiados programas que se
encuentran en ejecución) ¿Qué cosa puede salir mal?
**** ¿Cómo se ejecutan los programas?
Si me preguntaran en qué consiste un programa diría /formular acciones
de una manera sistemática y clara que hasta una computadora puede
hacerlo/, es un proceso que involucra dos pasos:

1. Entender el universo.
2. Explicárselo a un niño de tres años.

El primer punto implica que debes conocer lo que deseas programar: no
puedes escribir un shooter si no sabes física, la segunda tiene que
ver con la poca información que una computadora posee del mundo
exterior. Debido a esta falta de información se crearon un conjunto de
abstracciones que nos permiten interactuar con el sistema dependiendo
de nuestras necesidades.

#+begin_src plantuml :file arquitectura.png
  digraph overview {
    node [style=rounded]
    Physic [shape=box, label="Implementación física"]
    Logic [shape=box, label="Diseño lógico"]
    Hardware [shape=box, label="Hardware"]
    SO [shape=box, label="Sistema Operativo"]
    App [shape=box, label="Aplicaciones"]
    User [shape=box, label="Usuarios"]

    Physic -> Logic
    Logic -> Hardware
    Hardware -> SO
    SO -> App
    App -> User
  }
#+end_src

[[file:arquitectura.png]]

La implementación física está limitada por la tecnología de la época
en la que se manufacture el equipo de cómputo depende de los avances
físicos e ingenieriles que se tengan disponibles para poder hacer
realidad el diseño (piensen en la carrera por implementar
microprocesadores cuya longitud de transistor sea lo más [[https://www.techcenturion.com/7nm-10nm-14nm-fabrication][pequeña
posible]]), como extra cabe mencionar que el desarrollo físico de los
elementos de cómputo está íntimamente ligado a la [[eww:https://en.wikipedia.org/wiki/Microarchitecture][microarquitectura]],
la cual define los requerimentos que debe cumplir el sistema
físico.

El diseño lógico consiste en crear una abstracción que permita
desarrollar software que controle la parte física (controladores de
dispositivos, implementación de protocolos de comunicación entre
componentes físicos, etc.) de tal manera que cualquier usuario de un
subsistema pueda comunicarse con él sin necesidad de conocer a fondo
todo el hardware, la culminación de esta abstacción se encuentra en
sistemas como UEFI y BIOS (que utiliza [[https://en.wikipedia.org/wiki/Microcode][microcódigo]] para cumplir este
objetivo).

El sistema operativo (SO) se encarga de abstraer un conjunto de
arquitecturas de cómputo valiéndose de los elementos que el BIOS o el
UEFI pone a su disposición, es el encargado de administrar el tiempo
de cómputo que se le asigna a todos los trabajos que se encuentran e
ejecución y de orquestar las peticiones que se hacen a los
dispositivos de entrada y salida del sistema. Todos estos recursos se
abstraen en una tabla de funciones conocida como *tabla de llamadas al
sistema*, dicha tabla declara la funcionalidad que los usuarios
finales (aplicaciones, equipos externos y humanos) podran utilizar
para interactuar con el sistema de cómputo. Una característica
particular que los sistemas operativos tienen es que *siempre se
encuentran en ejecución* de hecho *el sistema opreativo es el único
programa que siempre se encuentra en ejecución dentro de un sistema de
cómputo*, no importa lo que pase, si hay que realizar una acción en un
sistema de cómputo el SO siempre está involucrado.

A modo de separación agregué dos capas extra: aplicaciones y usuarios,
técnicamente esta es la última capa en el modelo de separación de
responsabilidades que veremos, sin embargo pondré en aplicaciones
aquellos programas que nos permiten administrar los recursos como
archivos, sistemas de archivos, manejadores de desipositivos, entornos
gráficos, etc. Estos se conocen comunmente como *utilerías del
sistema*. En la segunda categoría caen programas como editores de
texto, compiladores, enlazadores, debuggers, navegadores, juegos, etc.

Las distintas capas pueden comunicarse unas con otras a través de
*interfaces*, cada una con distintos privilegios a los recursos que se
encuentran en las capas adyacentes. Desde luego, mientras más bajemos
(de acuerdo a la figura anterior) mayor será la abstracción y muchos
más servicios se tienen disponibles para realizar acciones más
complejas de manera más rápida para el consumidor de dichos servicios.

#+begin_src plantuml :file abstraccion.png
  digraph abstraccion {
    node [style=rounded]
    dispositivos [shape=box,label="Dispositivos de hardware"]
    so [shape=box,label="Sistema Operativo"]
    util [shape=box, label="Utilerías de Sistema"]
    hyper [shape=box, label="Hipervisores"]
    navegador [shape=box, label="Navegador"]
    editor [shape=box, label="Editor"]
    web [shape=box, label="WebApp"]
    vm [shape=box, label="Máquina Virtual"]

    web -> navegador
    navegador -> web

    hyper -> so
    so -> hyper
    hyper -> vm
    vm -> hyper

    so -> util
    util -> so

    util -> navegador
    navegador -> util

    editor -> util
    util -> editor

    dispositivos -> so
    so -> dispositivos
  }
#+end_src

[[file:abstraccion.png]]

Para que un programa de aplicación ejecute todas sus instrucciones
deben pasar muchas cosas: petición de memoria para guardar variables,
interacción con el sistema de archivos, mensajes de red, mostrar
información en pantalla. La única manera de interactuar con esos
recursos es a través de la *tabla de llamadas al sistema* (la tabla de
llamadas al sistema de linux puede ser encontrada [[https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/][aquí]]), las entradas
son los servicios (un API) que el SO ofrece a los programas que se
ejecutarán en el equipo.

#+begin_src plantuml :file llamada.png
    digraph llamada {
      node [style=rounded]
      usr [shape=box, label="Programa de usuario"]
      so [shape=record, label="Controladores de dispositivo | <so> Sistema Operativo"]

      usr -> so:so [label="Llamadas a sistema"]
    }
#+end_src

[[file:llamada.png]]

En este mundo moderno los microprocesadores ejecutan más de un
programa al mismo tiempo, esto implica que podemos tener más programas
en ejecución que número de procesadores disponibles, para que todos
los programas se ejecuten y lleguen al término de su ejecución es
necesario parar la ejecución de unos programas mientras que reanudamos
la ejecución de otros, esto se llama *cambio de contexto*:

#+begin_src plantuml :file contexto.png
    "Programa de usuario" --> "Sistema Operativo"
    "Sistema Operativo" --> if "Se puede atender la petición" then

      -->[true] "Despachar petición"

    else

      -->[false] "Dormir programa"
      --> "Encotrar un programa listo para ejecutarse"
      --> "Despertar programa"
      --> "Despachar petición"

    endif

  --> "Restaurar contexto"

  --> "Sistema Operativo"

  --> "Programa de usuario"

#+end_src

[[file:contexto.png]]

El mecanismo físico dentro del cpu que hace posible la ejecución
simultánea de tareas es llamado _unidad de intrerrupcíon_ y su trabajo
es escuchar las peticiones de otros dispositivos (incluido el cpu
mismo). La forma de trabajo es la siguiente: un dispositivo necesita
atención y para obtenerla hace lo que todo niño de tres años haría,
esto es, llorar. Dentro de este contexto la petición se le conoce como
*petición de interrupción*, esta petición tiene un efecto secundario:
forza al cpu para terminar la ejecución de lo que esté computando en
ese momento, realiza un cambio de contexto y reanuda la ejecución de
un programa especial llamado *manejador de interrupciones* (/interrupt
handler/).  Este manejador de interrupciones es el encargado de
averiguar quién, dónde, cómo y por qué se creó la petición, hace todos
los arreglos posibles para que dicha petición sea cumplida en el
futuro, avisa al programa/dispositivo que generó la interrupción que
su petición ha sido atendida y realiza un cambio de contexto para que
otro programa sea ejecutado en la cpu ¿Qué pasaría si no existiera un
manejador de interrupciones?

Para poder realizar un cambio de contexto es necesario guardar el
_estado actual_ de ejecución en algún lado (recuerden su clase de
arquitectura de computadoras), las computadoras electrónicas digitales
utilizan un tipo de memoria llamado *pila del sistema*, el manejador
de interrupciones utiliza la pila para guardar toda la información que
necesite posteriormente, esta información viene en forma de valores
guardados en los registros del cpu.

¿Dónde se encuentra almacenado el manejador de registros? ¿Cómo puede
el cpu encontrarlo? Las computadoras electrónicas digitales funcionan
gracias a la interconectividad de diversos dispositivos conectados
físicamente a través de alambres (técnicamente llamados /buses de
datos/), estos buses de datos son enumerados y se les asigna una
dirección de memoria única, mediante la cual pueden ser identificados
y llamados cuando se necesite. El conjunto de direcciones de memoria
asignados a dispositivos físicos y a funcionalidad muy específica del
sistema operativo es conocido como *vector de interrupciones* y, como
su nombre lo indica, guarda un apuntador a la dirección de memoria
donde se encuentra la interrupción, de esta forma el software puede
hablar con el hardware de manera "transparente".

#+begin_src plantuml :file interrupcion.png
  digraph interrupcion {
    node [style=rounded]
    programa [shape=box, label="Programa"]
    interrupt [shape=box, label="Manejador de Interrupciones"]
    so [shape=box, label="Sistema Operativo"]

    programa -> interrupt [label="Necesita recurso"]
    interrupt -> interrupt [label="Procesa petición"]
    interrupt -> so [label="Regresa control al SO"]
    so -> programa [label="Ejecuta un programa"]
  }
#+end_src


[[file:interrupcion.png]]

Las interrupciones originadas desde un dispositivo físico se conocen
como *interrupciones de hardware*, mientras que las lanzadas por el
sistema operativo como parte de una solicitud de un programa de
usuario son conocidas como *interrupciones de sistema/software*. Las
interrupciones de hardware están limitadas al número y características
de los dispositivos que conforman la computadora. Un ejemplo de
interrupción de hardware es la división entre cero y un ejemplo de
interrupción de software es la creación de un archivo.

Pero ¿qué es una interrupción? Podemos definirla como:

#+begin_quote
Una *interrupción* es una señal de entrada enviada al procesador la
cual indica que surgió un evento que requiere procesamiento inmediato.

Una señal de interrupción aletra al procesador y sirve como una
petición para interrumpir la ejecución del programa que se encuentra
actualmente dentro del cpu.
#+end_quote

Dada la basta cantidad de interrupciones que se pueden generar se ha
implementado una jerarquía o *prioritización* de las interrupciones:
las de hardware tienen preferencia sobre cualquier interrupción de
software, esto implica que una interrupción de baja prioridad /puede
ser interrumpida/ por otra de prioridad mayor. Para tener control
sobre el tiempo de ejecución se implementan /contadores/ (timers),
semáforos y candados. Debido a la inherente complejidad introducida
por estructuras de datos mutables y andar observando el estado de
ejecución la mayoría de los SO's implementa una capa de abstracción
sobre las interrupciones llamada *llamadas al sistema/señales*.
**** Kernel

Hasta este punto hemos hablado de la capacidad de ejecución de
múltiples programas por parte de las computadoras, de algunos
subsistemas que permiten obtener recursos y de la habilidad de cambiar
el programa en ejecución ¿Quién es el encargado de orquestar todas
estas actividades? Si tuviéramos que describirlo debería ser algún
tipo de súper programa capaz de saber cómo realizar cambios de
contexto, saber quién realiza una petición y quién la puede servir,
además debe estar ejecuándose todo el tiempo para poder administrar
todos esos eventos. Este programa es la parte fundamental del sistema
operativo y se conoce como *kernel*, en el lenguaje correspondiente a
esta materia haremos una distinción entre el kernel (y los procesos
asociados a él) y los demás programas, los primeros son conocidos como
/programas de sistema/ mientras que los últimos son conocidos como
/programas de usuarios/ o /procesos/. Las tareas fundamentales de un
kernel son:

#+begin_src plantuml :file kernel_chiquito.png
  digraph kern {
    node [style=rounded]
    carga [shape=box, label="Cargar programa"]
    restaura [shape=box, label="Restaura estado"]
    ejecuta [shape=box, label="Ejecuta programa"]
    interrupt [shape=box, label="Interrupción del temporizador"]
    para [shape=box, label="Para el programa"]

    carga -> restaura -> ejecuta -> interrupt -> para -> carga
  }
#+end_src


[[file:kernel_chiquito.png]]

En el diagrama el SO hace uso de un temporizador para saber cúando
debe cargar otro programa de usuario, esta técnica es conocida como
/partición de tiempo/ (time slicing). Esa fue una de las técnicas
utilizadas por los sistemas de tiempo compartido implementados en los
mainframes, donde sólo un programa era ejecutado en determinado
momento. Conforme fue avanzando la electrónica y la memoria RAM de las
computadoras fue creciendo aparecieron más técnicas para administrar
la ejecución de los programas, una de ellas consistía en cargar tantos
programas como espacio de memoria tuviéramos disponibles:

#+begin_src plantuml :file memoria1.png
  digraph memoria {
    node [style=rounded]

    addr [shape=record, label="<n> 0xFFFF| <a> ... | <b> 0x3000 | <c> 0x2000| <d> 0x0000"]
    RAM [shape=record, label ="<n> Programa n| <a> ... | <b> Programa 2| <c> Programa 1 | <d> Sistema Operativo"]

    RAM:d -> addr:d [label="Dirección de memoria"]
    RAM:c -> addr:c
    RAM:b -> addr:b
    RAM:a -> addr:a
    RAM:n -> addr:n
  }
#+end_src

[[file:memoria1.png]]

Esto quiere decir que el modelo de memoria de los programas (la parte
que determina la dirección en memoria de una variable/función) debe
ser un poco más compleja: hay que obtener la dirección inicial del
programa y hacer un cálculo sencillo (sumar o multiplicar bytes) para
obtener la dirección física de los elementos dentro del mismo programa
(/dirección efectiva/), esto se logra utilizando un registro llamado
/registro índice/ el cual almacena la dirección inicial del programa y
la suma a la dirección de la variable/función que se desea obtener:

#+begin_src plantuml :file registro_indice.png
  digraph indice {
    node [style=rounded]

    addr [shape = box, label = "Dirección dentro del programa (relativa)"]
    ind [shape = box, label = "Dirección de inicio del programa (absoluta)"]
    suma [shape = diamond, label = "+"]
    real [shape = none, label = "Dirección efectiva (física)"]

    addr -> suma -> real
    ind -> suma
  }
#+end_src

[[file:registro_indice.png]]

Este *modelo de direccionamiento* se llama /direccionamiento
relativo/, los SO's modernos utilizan técnicas más avanzadas (memoria
virtual con paginación múltiple) para crear la ilusión de que el
sistema tiene memoria ilimitada y que cada programa tiene acceso a
toda la memoria disponible dentro del sistema.

** Tarea
+ Clonar este repositorio.
+ Mandar correo al ayudante con las siguientes características:
  + Asunto =[SO-2020-2]=.
  + Nombre completo, número de cuenta y aspiraciones del curso.
  + ¿Por qué el costo de empaquetado de un chip de procesamiento es
    más alto que el de la creación del chip?
+ Crear un archivo llamado =tareas_introduccion.org= que responda lo
  siguiente:
  + ¿Por qué es necesario que exista un manejador de interrupciones?
    ¿Qué es lo que podría pasar si no existiera?
  + Medita un poco y piensa ¿Qué otras interrupciones de hardware
    supones que existen en la arquitectura =x86_64=?
  + Tomando como referencia tu día a día como computólogo frente a una
    computadora electrónica digital ¿Qué interrupciones de software
    utilizas a menudo?
  + ¿Cómo se llama la unidad (dentro del CPU) encargada del
    direccionamiento de memoria?
** Para la siguiente semana
